

#========================================================
#=====================iHeater cfg========================
#========================================================

#=====================iHeater pins=======================
[board_pins iHeater_Aliases]
mcu: iHeater
aliases:
    TH0=PA3, TH1=PA0,
    HEATER=PA1, FAN=PA2,
    MODE=PA4,
    LED1=PA7, LED2=PA6, LED3=PA5,
    USART1_TX=PA9, USART1_RX=PA10

#=====================iHeater mcu=======================
[mcu iHeater] #second MCU
is_non_critical: true # flag this as non critical
serial: /dev/serial/by-id/usb-Klipper_stm32f042x6_430018000E53304347373020-if00
restart_method: command

#=====================iHeater config=======================

[heater_generic iHeater_H]
heater_pin: iHeater:HEATER
max_power: 1
sensor_type: NTC 100K MGB18-104F39050L32
sensor_pin: iHeater:TH0
pwm_cycle_time: 0.3
min_temp: 0
max_temp: 120
control: pid
pid_Kp: 37.948
pid_Ki: 2.040
pid_Kd: 176.497

[verify_heater iHeater_H]
max_error: 240
check_gain_time: 1800
heating_gain: 1

[heater_fan chamber_heater_fan]
pin: iHeater:FAN
heater: iHeater_H
heater_temp: 50.0
fan_speed: 1.0
shutdown_speed: 0
kick_start_time: 0.5

[temperature_sensor iHeater_Chamber_Sensor]
sensor_pin: iHeater:TH1
sensor_type: NTC 100K MGB18-104F39050L32
min_temp: 0
max_temp: 140

[gcode_button mode_button]
pin: iHeater:MODE
# debounce_delay: 50
press_gcode: iHEATER_OFF

[output_pin led_1]
pin: iHeater:LED1

[output_pin led_2]
pin: iHeater:LED2

[output_pin led_3]
pin: iHeater:LED3

#######################################################
##########################SETUP########################
#######################################################

[gcode_macro CHAMBER_VARS]
variable_chamber_target: 0          # целевая температура камеры, °C
variable_delta_temp: 10             # дельта между камерой и нагревателем, °C
variable_min_heater_temp: 50        # минимальная температура нагревателя (для охлаждения), °C
variable_max_heater_temp: 100       # максимальная температура нагревателя, °C
variable_control_interval: 1.0      # интервал вызова функции управления, секунды
gcode:

##########################MACRO########################

[gcode_macro M141]
#rename_existing: M141.1
gcode:
    # Получаем желаемую температуру камеры из параметра S или по умолчанию
    {% set chamber_target = params.S|default(printer["gcode_macro CHAMBER_VARS"].chamber_target)|int %}
    # Получаем значение температурной дельты:
    # - если передан параметр D — используем его
    # - иначе берём значение delta_temp из CHAMBER_VARS
    {% set delta = params.D|default(printer["gcode_macro CHAMBER_VARS"].delta_temp)|int %}
    # Получаем максимальную температуру нагревателя:
    # - если передан параметр H — используем его
    # - иначе берём значение max_heater_temp из CHAMBER_VARS
    {% set max_temp = params.H|default(printer["gcode_macro CHAMBER_VARS"].max_heater_temp)|int %}
    # Получаем интервал для вызова функции управления
    {% set control_interval = printer["gcode_macro CHAMBER_VARS"].control_interval|float %}

    RESPOND prefix="M141" msg="S{chamber_target} D{delta} H{max_temp}"

    # Сохраняем параметры в CHAMBER_VARS для delayed_gcode
    SET_GCODE_VARIABLE MACRO=CHAMBER_VARS VARIABLE=chamber_target VALUE={chamber_target}
    SET_GCODE_VARIABLE MACRO=CHAMBER_VARS VARIABLE=delta_temp VALUE={delta}
    SET_GCODE_VARIABLE MACRO=CHAMBER_VARS VARIABLE=max_heater_temp VALUE={max_temp}

    # Запускаем макрос контроля температуры
    UPDATE_DELAYED_GCODE ID=_iHEATER_CONTROL DURATION={control_interval}


[gcode_macro M191]
#rename_existing: M191.1
gcode:
    # Получаем желаемую температуру камеры из параметра S или по умолчанию
    {% set chamber_target = params.S|default(printer["gcode_macro CHAMBER_VARS"].chamber_target)|int %}
    # Получаем значение температурной дельты:
    # - если передан параметр D — используем его
    # - иначе берём значение delta_temp из CHAMBER_VARS
    {% set delta = params.D|default(printer["gcode_macro CHAMBER_VARS"].delta_temp)|int %}
    # Получаем максимальную температуру нагревателя:
    # - если передан параметр H — используем его
    # - иначе берём значение max_heater_temp из CHAMBER_VARS
    {% set max_temp = params.H|default(printer["gcode_macro CHAMBER_VARS"].max_heater_temp)|int %}
    
    RESPOND prefix="M191" msg="S{chamber_target} D{delta} H{max_temp}"

    M141 S{chamber_target} D{delta} H{max_temp}

    # Ждём, пока камера достигнет заданной температуры
    TEMPERATURE_WAIT SENSOR=iHeater_Chamber_Sensor MINIMUM={chamber_target}
    RESPOND prefix="M191" msg="Камера достигла температуры {chamber_target}°C"


[gcode_macro iHEATER_ON]
description: Псевдоним команды M141 с альтернативными именами параметров
gcode:
    {% set s = params.CHAMBER_TEMP|default(printer["gcode_macro CHAMBER_VARS"].chamber_target)|int %}
    {% set d = params.DELTA|default(printer["gcode_macro CHAMBER_VARS"].delta_temp)|int %}
    {% set h = params.HEATER_MAX|default(printer["gcode_macro CHAMBER_VARS"].max_heater_temp)|int %}

    M141 S{s} D{d} H{h}


[gcode_macro iHEATER_OFF]
gcode:
    SET_GCODE_VARIABLE MACRO=CHAMBER_VARS VARIABLE=chamber_target VALUE=0

    UPDATE_DELAYED_GCODE ID=_iHEATER_CONTROL DURATION=1
    RESPOND prefix="iHeater_off" msg="Нагрев отключён."


[delayed_gcode _iHEATER_CONTROL]
gcode:
    # Целевая температура камеры
    {% set target_chamber_temp = printer["gcode_macro CHAMBER_VARS"].chamber_target|float %}
    # Дельта — насколько температура нагревателя превышает температуру камеры
    {% set delta = printer["gcode_macro CHAMBER_VARS"].delta_temp|float %}
    # Минимальная температура нагревателя
    {% set min_heater_temp = printer["gcode_macro CHAMBER_VARS"].min_heater_temp|float %}
    # Максимальная температура нагревателя
    {% set max_heater_temp = printer["gcode_macro CHAMBER_VARS"].max_heater_temp|float %}
    # Текущая температура нагревателя
    {% set heater_temp = printer["heater_generic iHeater_H"].temperature|float %}
    # Текущая температура воздуха в камере (с термодатчика)
    {% set chamber_temp = printer["temperature_sensor iHeater_Chamber_Sensor"].temperature|float %}
    # Получаем интервал для вызова функции управления
    {% set control_interval = printer["gcode_macro CHAMBER_VARS"].control_interval|float %}
    # Переменная для установки целевой температуры нагревателя
    {% set target_heater_temp = 0.0 %}

    {% if target_chamber_temp > 0 %}
        # Нагрев активен
        {% set temp_diff = target_chamber_temp - chamber_temp %}

        {% set heater_air_delta = 0.5 %}
        {% set heating_threshold = 5.0 %}

        {% set value = temp_diff %}
        {% set inputLowerBound = heater_air_delta %}
        {% set inputUpperBound = heating_threshold %}
        {% set outputLowerBound = delta %}
        {% set outputUpperBound = (max_heater_temp - target_chamber_temp)|abs %}

        {% set slope = (outputUpperBound - outputLowerBound) / (inputUpperBound - inputLowerBound) %}
        {% set clamped = ([inputLowerBound, value, inputUpperBound]|sort)[1] %}
        {% set adjustment = outputLowerBound + slope * (clamped - inputLowerBound) %}   
        {% set target_heater_temp = (target_chamber_temp + adjustment)|round(2) %}

    {% elif heater_temp > min_heater_temp %}
        # Нагрев выключен, но нагреватель ещё не остыл
        RESPOND prefix="iHeater_control" msg="Охлаждение нагревателя..."
    {% else %}
        # Нагреватель остыл — завершаем макрос
        RESPOND prefix="iHeater_control" msg="Охлаждение нагревателя завершёно."
        {% set control_interval = 0.0 %}
    {% endif %}

    SET_HEATER_TEMPERATURE HEATER=iHeater_H TARGET={target_heater_temp}
    UPDATE_DELAYED_GCODE ID=_iHEATER_CONTROL DURATION={control_interval}